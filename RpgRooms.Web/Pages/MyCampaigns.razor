@page "/campaigns/mine"
@using System.Net
@attribute [Authorize]
@inject HttpClient Http

<h3>Minhas Campanhas</h3>

@if (!string.IsNullOrEmpty(error))
{
    <p style="color:red">@error</p>
}
else
{
    <ul>
        @if (campaigns is null)
        {
            <li>Carregando...</li>
        }
        else if (campaigns.Count == 0)
        {
            <li>Nenhuma campanha encontrada.</li>
        }
        else
        {
            @foreach (var c in campaigns)
            {
                <li>
                    <b>@c.Name</b> — @c.Status — @(c.IsRecruiting ? "Recrutando" : "Fechada")
                    <a href="/campaigns/@c.Id" style="margin-left:8px">ver</a>
                    @if (c.OwnerUserId != userId)
                    {
                        <button class="btn" style="margin-left:4px" @onclick="() => Leave(c.Id)">sair</button>
                    }
                </li>
            }
        }
    </ul>
}

@code {
    private List<Campaign>? campaigns;
    private string? error;
    private string? userId;

    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        userId = (await AuthStateTask).User.Identity?.Name;
        var response = await Http.GetAsync("/api/campaigns/mine");
        if (response.IsSuccessStatusCode)
        {
            campaigns = await response.Content.ReadFromJsonAsync<List<Campaign>>() ?? new();
        }
        else if (response.StatusCode == HttpStatusCode.Unauthorized)
        {
            error = "Por favor, faça login para ver suas campanhas.";
        }
        else
        {
            error = "Falha ao carregar campanhas.";
        }
    }

    private async Task Leave(Guid campaignId)
    {
        var res = await Http.DeleteAsync($"/api/campaigns/{campaignId}/leave");
        if (res.IsSuccessStatusCode && campaigns is not null)
        {
            campaigns = campaigns.Where(c => c.Id != campaignId).ToList();
            StateHasChanged();
        }
    }
}
