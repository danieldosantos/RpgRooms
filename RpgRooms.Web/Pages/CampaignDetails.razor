@page "/campaigns/{id:guid}"
@using Microsoft.AspNetCore.Components.Web
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS
@using RpgRooms.Core.Application.DTOs
@using RpgRooms.Core.Domain.Enums
@using System.Net
@using Microsoft.JSInterop
@using System.Security.Claims
@implements IAsyncDisposable

<h3>@campaign?.Name</h3>
@if (loadFailed)
{
    <p class="text-danger">Falha ao carregar a campanha.</p>
}
else if (campaign is null)
{
    <p>Carregando...</p>
}
else
{
    if (!isGm && !isMember)
    {
        <p>@campaign.Description</p>
        <p>GM: @campaign.OwnerUserId</p>
        <form @onsubmit="SendJoinRequest" @onsubmit:preventDefault>
            <textarea @bind="joinMessage"></textarea>
            <button class="btn" type="submit" disabled="@joinSent">Enviar pedido</button>
        </form>
        @if (joinSent)
        {
            <p class="text-success">Pedido enviado!</p>
        }
    }
    else
    {
        if (campaign.Status == CampaignStatus.Finalized)
        {
            <p class="text-warning">Campanha finalizada pelo GM.</p>
        }
        <p>@campaign.Description</p>
        <p>Status: <b>@campaign.Status</b> — @(campaign.IsRecruiting ? "Recrutando" : "Fechada")</p>

        @if (isMember && !isGm)
        {
            <button class="btn" @onclick="Leave">Sair da campanha</button>
        }

        @if (isGm)
        {
            <button class="btn" @onclick="ToggleRecruitment">Alternar Recrutamento</button>
            <button class="btn" @onclick="FinalizeCampaign" style="margin-left:8px">Finalizar Campanha</button>

            <h4>Solicitações Pendentes</h4>
            @if (joinRequests.Count == 0)
            {
                <p>Nenhuma solicitação.</p>
            }
            else
            {
                @foreach (var r in joinRequests)
                {
                    <div>
                        <div>@r.UserId</div>
                        <p class="join-request-message">@r.Message</p>
                        <button class="btn" @onclick="() => Approve(r.Id)">Aprovar</button>
                        <button class="btn" @onclick="() => Reject(r.Id)" style="margin-left:4px">Rejeitar</button>
                    </div>
                }
            }

            <h4>Membros</h4>
            @if (members.Count == 0)
            {
                <p>Nenhum membro.</p>
            }
            else
            {
                @foreach (var m in members)
                {
                    <div>@m.UserId (@m.CharacterName)
                        <input @bind="memberCharIds[m.UserId]" placeholder="Ficha" style="margin-left:4px" />
                        <button class="btn" @onclick="() => SetCharacter(m.UserId)" style="margin-left:4px">Definir</button>
                        <button class="btn" @onclick="() => Kick(m.UserId)" style="margin-left:4px">Remover</button>
                    </div>
                }
            }
        }

        <h4>@(isGm ? "Personagens" : "Meus Personagens")</h4>
        @if (characters.Count == 0)
        {
            <p>Nenhum personagem.</p>
        }
        else
        {
            @foreach (var c in characters)
            {
                if (isGm)
                {
                    <div>
                        <a href="/campaigns/@id/characters/@c.Character.Id">@c.Character.Name</a>
                        <a href="/campaigns/@id/characters/@c.Character.Id/edit" style="margin-left:4px">Editar</a>
                    </div>
                }
                else
                {
                    <div><a href="/campaigns/@id/characters/@c.Character.Id/edit">@c.Character.Name</a></div>
                }
            }
        }

        @if (isMember && !isGm)
        {
            <button class="btn" @onclick="CreateCharacter">Criar Ficha</button>
        }

        <hr />
        <h4>Chat</h4>
        <label>Nome para exibir</label>
        <input @bind="displayName" />
        <label style="margin-left:8px"><input type="checkbox" @bind="sentAsCharacter" /> Enviar como personagem</label>

        <div class="chat-box">
            @foreach (var m in messages)
            {
                <div><b>@m.DisplayName</b>: @m.Content</div>
            }
        </div>

        <input @bind="message" @onkeydown="HandleKey" placeholder="Digite uma mensagem..." />
        <button class="btn" @onclick="Send">Enviar</button>
    }
}

@code {
    [Parameter] public Guid id { get; set; }

    Campaign? campaign;
    List<ChatMessageDto> messages = new();
    List<JoinRequest> joinRequests = new();
    List<CampaignMember> members = new();
    List<CharacterSheetDto> characters = new();
    Dictionary<string, string> memberCharIds = new();
    string message = string.Empty;
    string displayName = string.Empty;
    string joinMessage = string.Empty;
    bool joinSent;
    bool sentAsCharacter;
    bool isGm;
    bool isMember;
    bool loadFailed;
    private DotNetObjectReference<CampaignDetails>? _objRef;
    // Indicates the component is still in the prerendering phase. Used to avoid
    // invoking JS interop before the circuit is fully active.
    private bool _prerendering = true;

    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var campaignResponse = await Http.GetAsync($"/api/campaigns/{id}");
            if (campaignResponse.StatusCode == HttpStatusCode.Unauthorized)
            {
                Nav.NavigateTo($"/login?returnUrl=/campaigns/{id}", true);
                return;
            }
            campaignResponse.EnsureSuccessStatusCode();
            campaign = await campaignResponse.Content.ReadFromJsonAsync<Campaign>();

            await RefreshIsGm();
            try
            {
                isMember = await Http.GetFromJsonAsync<bool>($"/api/campaigns/{id}/is-member");
            }
            catch
            {
                isMember = false;
            }

            if (isGm || isMember)
            {
                var messagesResponse = await Http.GetAsync($"/api/campaigns/{id}/messages");
                if (messagesResponse.IsSuccessStatusCode)
                {
                    messages = await messagesResponse.Content.ReadFromJsonAsync<List<ChatMessageDto>>() ?? new();
                }

                try
                {
                    characters = await Http.GetFromJsonAsync<List<CharacterSheetDto>>($"/api/campaigns/{id}/characters") ?? new();
                }
                catch
                {
                    characters = new();
                }

                if (isGm)
                {
                    try
                    {
                        await LoadJoinRequests();
                    }
                    catch
                    {
                        // Ignora falhas ao carregar solicitações
                    }

                    try
                    {
                        await LoadMembers();
                    }
                    catch
                    {
                        // Ignora falhas ao carregar membros
                    }
                }
            }

            var user = (await AuthStateTask).User;
            if (user.Identity?.IsAuthenticated == true && (isGm || isMember))
            {
                try
                {
                    _objRef = DotNetObjectReference.Create(this);
                    await JS.InvokeVoidAsync("chat.join", id.ToString(), _objRef);
                }
                catch (JSException)
                {
                    // Ignora falhas de conexão do SignalR
                }
            }
        }
        catch
        {
            loadFailed = true;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _prerendering = false;
        }
    }

    private async Task RefreshIsGm()
    {
        try
        {
            var c = await Http.GetFromJsonAsync<Campaign>($"/api/campaigns/{id}");
            var me = (await AuthStateTask)!.User.FindFirstValue(ClaimTypes.NameIdentifier);
            isGm = c?.OwnerUserId == me;
        }
        catch
        {
            isGm = false;
        }
    }

    private async Task LoadJoinRequests()
    {
        joinRequests = await Http.GetFromJsonAsync<List<JoinRequest>>($"/api/campaigns/{id}/join-requests") ?? new();
    }

    private async Task LoadMembers()
    {
        members = await Http.GetFromJsonAsync<List<CampaignMember>>($"/api/campaigns/{id}/members") ?? new();
        foreach (var member in members)
        {
            memberCharIds.TryAdd(member.UserId, string.Empty);
        }
    }

    [JSInvokable]
    public Task OnReceiveMessage(ChatMessageDto dto)
    {
        messages.Add(dto);
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OnSystemNotice(string text)
    {
        messages.Add(new ChatMessageDto(Guid.Empty, "Sistema", text, false));
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task ToggleRecruitment()
    {
        var res = await Http.PutAsync($"/api/campaigns/{id}/recruitment/toggle", null);
        res.EnsureSuccessStatusCode();
        campaign = await Http.GetFromJsonAsync<Campaign>($"/api/campaigns/{id}");
    }

    private async Task FinalizeCampaign()
    {
        var res = await Http.PutAsync($"/api/campaigns/{id}/finalize", null);
        res.EnsureSuccessStatusCode();
        campaign = await Http.GetFromJsonAsync<Campaign>($"/api/campaigns/{id}");
        await RefreshIsGm();
    }

    private async Task SendJoinRequest()
    {
        var res = await Http.PostAsJsonAsync($"/api/campaigns/{id}/join-requests", new { Message = joinMessage });
        res.EnsureSuccessStatusCode();
        joinMessage = string.Empty;
        joinSent = true;
    }

    private async Task Approve(Guid reqId)
    {
        var res = await Http.PutAsync($"/api/campaigns/{id}/join-requests/{reqId}/approve", null);
        res.EnsureSuccessStatusCode();
        await LoadJoinRequests();
        await LoadMembers();
    }

    private async Task Reject(Guid reqId)
    {
        var res = await Http.PutAsync($"/api/campaigns/{id}/join-requests/{reqId}/reject", null);
        res.EnsureSuccessStatusCode();
        await LoadJoinRequests();
    }

    private async Task Kick(string userId)
    {
        var res = await Http.DeleteAsync($"/api/campaigns/{id}/members/{userId}");
        res.EnsureSuccessStatusCode();
        await LoadMembers();
    }

    private async Task CreateCharacter()
    {
        var name = await JS.InvokeAsync<string?>("prompt", "Nome do personagem:");
        if (string.IsNullOrWhiteSpace(name) || name.Length < 3) return;
        var res = await Http.PostAsJsonAsync($"/api/campaigns/{id}/characters", new Character { Name = name });
        if (res.IsSuccessStatusCode)
        {
            var sheet = await res.Content.ReadFromJsonAsync<CharacterSheetDto>();
            if (sheet?.Character is not null)
                Nav.NavigateTo($"/campaigns/{id}/characters/{sheet.Character.Id}/edit", true);
        }
    }

    private async Task SetCharacter(string userId)
    {
        if (!memberCharIds.TryGetValue(userId, out var charIdStr)) return;
        if (!Guid.TryParse(charIdStr, out var charId)) return;
        var res = await Http.PutAsJsonAsync($"/api/campaigns/{id}/members/{userId}/character", new { CharacterId = charId });
        if (res.IsSuccessStatusCode)
            await LoadMembers();
    }

    private async Task Leave()
    {
        var res = await Http.DeleteAsync($"/api/campaigns/{id}/leave");
        res.EnsureSuccessStatusCode();
        Nav.NavigateTo("/campaigns/mine", true);
    }

    private async Task Send()
    {
        if (string.IsNullOrWhiteSpace(message)) return;
        await JS.InvokeVoidAsync("chat.send", id.ToString(), displayName, message, sentAsCharacter);
        message = string.Empty;
    }

    private async Task HandleKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") await Send();
    }

    public async ValueTask DisposeAsync()
    {
        if (_objRef is not null)
        {
            if (JS is not null && !_prerendering)
            {
                try
                {
                    await JS.InvokeVoidAsync("chat.leave", id.ToString());
                }
                catch (JSDisconnectedException)
                {
                    // Ignora chamadas quando o circuito foi desconectado
                }
                catch (JSException)
                {
                    // Ignora falhas de conexão do SignalR
                }
                catch (InvalidOperationException)
                {
                    // Evita invocar JS quando o circuito já foi encerrado
                }
            }

            _objRef.Dispose();
            _objRef = null;
        }
    }
}
